Burada çevrimiçi 2 kişilik mayın tarlası oyunu olacak.

Oyunun Son Kuralları:
*   Oyuncular sırayla hamle yapar (kapalı bir hücreyi açar).
*   Her oyuncunun seçilen zorluğa göre belirlenen bir toplam süresi vardır (örn: 8x8 için 30sn, 16x16 için 1.5dk). Süre sadece oyuncunun kendi sırası geldiğinde, hamlesini yapana kadar azalır.
*   Kapalı bir hücreye sağ tıklayarak bayrak koyulabilir/kaldırılabilir.
    *   Oyuncular sadece kendi koydukları bayrakları kaldırabilir.
    *   **Sadece sırası gelen oyuncu bayrak koyabilir.**
    *   Bayraklar her iki oyuncu tarafından da görülür ancak kimin koyduğuna göre kenarlık rengi farklıdır (1. Oyuncu: Mavi, 2. Oyuncu: Kırmızı).
    *   Oyuncular kendi bayrakladıkları hücreleri açamazlar.
    *   Bayrak koymak/kaldırmak sırayı değiştirmez ve zamanlayıcıyı etkilemez.
*   Üzerinde sayı yazan güvenli bir hücreyi açmak, o sayı kadar puan kazandırır. Sıra ve zamanlayıcı kontrolü rakibe geçer.
*   Üzerinde '0' yazan bir hücre açıldığında 0 puan kazandırılır. Bu hücreye komşu '0' hücreleri ve onlara komşu ilk sıradaki sayılı hücreler otomatik olarak açılır (kaskad açılım). Bu otomatik açılım sırasında açılan sayılı hücrelerden ekstra puan kazanılmaz. Sıra ve zamanlayıcı kontrolü rakibe geçer.
*   Mayın içeren bir hücreyi açmak puan kazandırmaz (0 puan). Sıra ve zamanlayıcı kontrolü rakibe geçer.
*   Eğer bir oyuncu, rakibinin **yanlış** bayrakladığı (içinde mayın olmayan) bir hücreyi açarsa, bayrağı yanlış koyan rakip 1 puan kaybeder. (Açan oyuncu yine hücredeki sayı kadar puan alır). Sıra ve zamanlayıcı kontrolü rakibe geçer.
*   Oyun aşağıdaki durumlarda sona erer:
    *   Tüm mayın olmayan (güvenli) hücreler açıldığında. Bu durumda en yüksek puana sahip oyuncu kazanır. Puanlar eşitse oyun berabere biter.
    *   Bir oyuncunun toplam süresi bittiğinde. Oyun biter, süresi biten oyuncunun zamanı sıfırlanır. Açılmamış tüm güvenli hücrelerin puan değerleri hesaplanır ve süresi bitmeyen rakibin skoruna eklenir. Son skorlara göre en yüksek puana sahip oyuncu kazanır, eşitlik durumunda berabere biter.
    *   Bir oyuncunun bağlantısı koptuğunda. Oyunda kalan oyuncu kazanır.

Kod Yapısı ve Mimari Prensip:
*   **Mimari:** Frontend (React) sadece sunum katmanı (presentation layer) olarak görev yapacak, tüm oyun mantığı, durum yönetimi ve kural uygulama işlemleri backend'de (Spring Boot) merkezileştirilecektir. Frontend, kullanıcı etkileşimlerini backend'e iletecek ve backend'den gelen güncel durumu ekrana yansıtacaktır.
*   **Frontend (`frontend` dizini):** `react` ve `typescript` kullanılacaktır.
    *   `react-router-dom` ile yönlendirme (routing) yönetilecek (`/` ve `/:gameId` rotaları).
    *   Ana yönlendirme ve genel oyun durumu (`App.tsx` içinde) yönetilecek (backend'den gelen verilere göre).
    *   `GameSetup.tsx` kullanıcı adı girişini ve URL'ye göre hangi alt bileşenin gösterileceğini belirleyecek.
    *   `CreateOrJoinGame.tsx` yeni oyun oluşturma ve mevcut oyunları listeleme/katılma arayüzünü (`/` rotası için) içerecek (backend ile iletişim kurarak).
    *   `JoinGameById.tsx` belirli bir oyuna (`/:gameId` rotası) katılma arayüzünü içerecek (backend ile iletişim kurarak).
    *   `GameBoard.tsx` oyun tahtasını, skorları, süreleri ve diğer oyun içi bilgileri (backend'den gelen verilere göre) gösterecek ve etkileşimleri backend'e iletecek.
    *   WebSocket bağlantısı (`WebSocketService.ts`) backend'den gelen güncellemeleri almak için kullanılacak.
    *   Backend ile API iletişimi (`GameService.ts`) üzerinden yapılacak (istek göndermek için).
*   **Backend (`backend` dizini):** `spring boot` kullanılacaktır.
    *   Tüm oyun mantığını, kurallarını, durum takibini (tahta, skorlar, süreler, sıra vb.) yönetecek.
    *   API uç noktaları (oyun oluşturma, katılma, hamle yapma, bayrak koyma vb.) sağlayacak.
    *   WebSocket üzerinden oyun durumu güncellemelerini ilgili istemcilere anlık olarak gönderecek.

CMD komutları çalıştırmadan önce bana sor otomatik çalıştırma yapma.
Komutlar windowsta powershell'de çalıştırılacak.
